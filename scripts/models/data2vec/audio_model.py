from transformers import AutoFeatureExtractor, Data2VecAudioForXVector
import torch.nn as nn

class AudioEncoder(nn.Module):
    """
    AudioEncoder class that uses the Data2VecAudio model to extract audio embeddings. 
    The model is partially frozen, with only the last transformer block and layer norm unfreezed for fine-tuning.

    Attributes:
        feature_extractor (AutoFeatureExtractor): Pre-trained feature extractor from the Data2Vec model.
        audio_model (Data2VecAudioForXVector): Pre-trained Data2Vec audio model used to extract embeddings.
    """

    def __init__(self) -> None:
        """
        Initializes the AudioEncoder by loading the pre-trained Data2VecAudio model and freezing most of its layers.
        """
        super(AudioEncoder, self).__init__()
        
        # Load pre-trained feature extractor and audio model
        self.feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/data2vec-audio-base-960h")
        self.audio_model = Data2VecAudioForXVector.from_pretrained("facebook/data2vec-audio-base-960h")

        # Freeze all model layers except the last transformer block and the layer norm
        for param in self.audio_model.parameters():
            param.requires_grad = False  # Freeze all parameters

        # Unfreeze the last transformer block
        for param in self.audio_model.data2vec_audio.encoder.layers[-1].parameters():
            param.requires_grad = True

        # Optionally, unfreeze the last layer norm for fine-tuning
        for param in self.audio_model.data2vec_audio.encoder.layer_norm.parameters():
            param.requires_grad = True

    def forward(self, audio):
        """
        Forward pass to get the embeddings for the input audio.

        Args:
            audio (torch.Tensor): Input audio tensor.

        Returns:
            torch.Tensor: Audio embeddings.
        """
        embeddings = self.get_embeddings(audio)
        return embeddings

    def get_embeddings(self, audio):
        """
        Extracts the audio embeddings from the Data2Vec model.

        Args:
            audio (torch.Tensor): Input audio tensor.

        Returns:
            torch.Tensor: Audio embeddings generated by the model.
        """
        audio_embeddings = self.audio_model(audio).embeddings
        return audio_embeddings
